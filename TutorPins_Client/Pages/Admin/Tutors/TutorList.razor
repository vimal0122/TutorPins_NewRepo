@page "/Tutors"
@inject IJSRuntime JSRuntime
@inject ITutorService tutorService
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@inject IConfiguration Configuration
<div class="row mt-4">
    <div class="col-8">
        <h4 class="card-title text-info">
            Tutors
        </h4>
    </div>
    <div class="col-3 offset-1">
        <NavLink href="tutors/create" class="btn btn-info form-control">
            Add New
        </NavLink>
    </div>
</div>
<div class="row mt-4">
    <div class="col-12">
        <div class="row mt-4">
            <div class="col-12">
                <SfGrid DataSource="@Tutors" AllowPaging="true" AllowSorting="true" AllowFiltering="true">
                    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                    <GridPageSettings PageSize="20"></GridPageSettings>
                    <GridColumns>
                        <GridColumn HeaderText="Tutor Image" TextAlign="TextAlign.Center" Width="60">
                            <Template>
                                @{
                                    var TutorInfo = (context as TutorDto);
                                    <div class="image">
                                        <img style="width:50px;border-radius: 50%" src="@UriHelper.ToAbsoluteUri($"{@Configuration["BaseAPIUrl"]}/api/imagedata/{TutorInfo.TutorImage}")" alt="@TutorInfo.TutorName" />
                                    </div>
                                }
                            </Template>
                        </GridColumn>
                        <GridColumn Field=@nameof(TutorDto.TutorName) HeaderText="Name" Width="100"></GridColumn>
                        
                        <GridColumn Field=@nameof(TutorDto.TutorEmail) HeaderText="Email" Width="100"></GridColumn>
                        <GridColumn Field=@nameof(TutorDto.TutorPhoneNo) HeaderText="ContactNo" Width="100"></GridColumn>
                    </GridColumns>
                </SfGrid>
                <SfSpinner @ref="@SpinnerObj"></SfSpinner>
            </div>


        </div>
        
    </div>
</div>
@code {
    private IEnumerable<TutorDto> Tutors { get; set; } = new List<TutorDto>();
    SfSpinner SpinnerObj;
    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1000);
        await LoadTutors();
        await SpinnerObj.HideAsync();

    }
    private async Task LoadTutors()
    {
        Tutors = await tutorService.GetAllTutors();
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SpinnerObj.ShowAsync();
        }
    }
}

@page "/coursecategories"
@inject IJSRuntime jsRuntime
@inject ICourseCategoryService courseCategoryService


<div class="row mt-4">
    <div class="col-8">
        <h4 class="card-title text-info">
             Categories
        </h4>
    </div>
    <div class="col-3 offset-1">
        <NavLink href="coursecategory/create" class="btn btn-info form-control">
            Add New 
        </NavLink>
    </div>
</div>
<div class="row mt-4">
    <div class="col-12">
        <SfGrid DataSource="@CourseCategories" AllowPaging="true" AllowSorting="true" AllowFiltering="true">
            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
            <GridPageSettings PageSize="20"></GridPageSettings>
            <GridColumns>
                <GridColumn Field=@nameof(CourseCategoryDto.CategoryName) HeaderText="Category"  Width="160"></GridColumn>
                <GridColumn Field=@nameof(CourseCategoryDto.IsActive) HeaderText="Status" FilterSettings="@(new FilterSettings { Type = Syncfusion.Blazor.Grids.FilterType.CheckBox })" Width="50">
                    <Template>
                        @{
                            var cc = (context as CourseCategoryDto);
                            if (cc.IsActive == true)
                            {
                                <div class="statustemp e-activecolor">
                                    <span class="statustxt e-activecolor">Active</span>
                                </div>
                            }
                            else
                            {
                                <div class="statustemp e-inactivecolor">
                                    <span class="statustxt e-inactivecolor">InActive</span>
                                </div>
                            }
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field=@nameof(CourseCategoryDto.CreatedDate) HeaderText=" Created Date" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="80"></GridColumn>
            </GridColumns>
            </SfGrid>
        <SfSpinner @ @ref="@SpinnerObj"></SfSpinner>
    </div>
    

</div>

@code {
    private IEnumerable<CourseCategoryDto> CourseCategories { get; set; } = new List<CourseCategoryDto>();
    SfSpinner SpinnerObj;
    protected override async Task OnInitializedAsync()
    {
        //await Task.Delay(5000);
        
        await LoadCourseCategories();
        await SpinnerObj.HideAsync();

        /*
        List<CourseDto> lstCourse = new List<CourseDto>();
        lstCourse.Add(new CourseDto { Id = 1, CourseCategory = "Primary", CourseName = "Pre School", IsActive = true });
        lstCourse.Add(new CourseDto { Id = 1, CourseCategory = "Secondary", CourseName = "Secondary 1", IsActive = true });
        lstCourse.Add(new CourseDto { Id = 1, CourseCategory = "Junior College", CourseName = "JC1", IsActive = true });
        Courses = lstCourse;
    */
    }
    private async Task LoadCourseCategories()
    {
        CourseCategories = await courseCategoryService.GetCourseCategories();
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SpinnerObj.ShowAsync();
        }
    }
}

@page "/courses/create"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ICourseCategoryService courseCategoryService
@inject ICourseService courseService


<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3 ml-3">@Title Course </h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <div class="form-group mt-2">
                    <div class="col-md-4">  
                        <label for="CourseName">Category</label>
                        <select class="form-control" @bind="@CourseModel.CourseCategoryId">  
                            <option value="">-- Select Category --</option>  
                            @foreach (var ct in courseCategoryList)
                            {  
                                <option value="@ct.Id">@ct.CategoryName</option>  
                            }  
                        </select>
                    </div>  
                </div>
                <div class="form-group mt-2">
                   
                    <SfTextBox CssClass="e-outline" Placeholder="Course Name" FloatLabelType="@FloatLabelType.Auto"
                    @bind-Value="@CourseCategoryModel.CategoryName"></SfTextBox>
                </div>
                <div class="form-group mt-2">                  

                    <div>
                        <label style="padding: 10px 70px 10px 0">Active</label>
                        <SfSwitch @bind-Checked="@CourseModel.IsActive"></SfSwitch>
                    </div>

                </div>
                <div class="form-group mt-2">
                    <input type="button" class="btn btn-primary" @onclick="@Save" value="Save" />
                    <input type="button" class="btn btn-primary" @onclick="@Back" value="Back" />
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private CourseCategoryDto CourseCategoryModel { get; set; } = new CourseCategoryDto();
    List<CourseCategoryDto> courseCategoryList = new List<CourseCategoryDto>();
    private CourseDto CourseModel { get; set; } = new CourseDto();

    private string Title { get; set; } = "Create";
    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(2000);
        IEnumerable<CourseCategoryDto> courseCategories = await courseCategoryService.GetCourseCategories();
        courseCategoryList = courseCategories.ToList();
    }
    protected async Task Save()
    {
        var response = await courseService.CreateCourse(CourseModel);
        if (response)
        {
            NavigationManager.NavigateTo("courses");
        }
    }
    void Back()
    {
        NavigationManager.NavigateTo("courses");
    }
}

@page "/coursecategory/create"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ICourseCategoryService courseCategoryService

<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3 ml-3">@Title Course Category</h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <div class="form-group mt-2">                 
                    <SfTextBox CssClass="e-outline" Placeholder="Category Name" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@CourseCategoryModel.CategoryName"></SfTextBox>
                </div>
             

                <div class="container switch-control">
                   
                    <div>
                        <label style="padding: 10px 70px 10px 0">Active</label>
                        <SfSwitch @bind-Checked="@CourseCategoryModel.IsActive"></SfSwitch>
                    </div>

                </div>

                <div class="form-group mt-2">
                    @* <input type="button" class="btn btn-primary" @onclick="@Save" value="Save" />
                    <input type="button" class="btn btn-primary" @onclick="@Back" value="Back" /> *@
                    <SfButton IsPrimary="true" CssClass="e-outline" @onclick="@Save">Save</SfButton>
                    <SfButton IsPrimary="false" CssClass="e-outline" @onclick="@Back">Back</SfButton>

                </div>
            </div>
        </div>
    </div>
</div>


@code {
    private CourseCategoryDto CourseCategoryModel { get; set; } = new CourseCategoryDto();
    private string Title { get; set; } = "Create";
    protected async Task Save()
    {
        var response = await courseCategoryService.CreateCourseCategory(CourseCategoryModel);
        if(response)
        {
            NavigationManager.NavigateTo("coursecategories");
        }
    }
    void Back()
    {
        NavigationManager.NavigateTo("coursecategories");
    }
}
